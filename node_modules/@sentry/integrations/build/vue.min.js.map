{"version":3,"file":"vue.min.js","sources":["../../utils/src/error.ts","../../utils/src/misc.ts","../../utils/src/logger.ts","../../utils/src/syncpromise.ts","../src/vue.ts","../../utils/src/is.ts"],"sourcesContent":["/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public constructor(public message: string) {\n    super(message);\n\n    // tslint:disable:no-unsafe-any\n    this.name = new.target.prototype.constructor.name;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n","import { Event, Mechanism, WrappedFunction } from '@sentry/types';\n\n/** Internal */\ninterface SentryGlobal {\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n  };\n}\n\n/**\n * Requires a module which is protected _against bundler minification.\n *\n * @param request The module path to resolve\n */\nexport function dynamicRequire(mod: any, request: string): any {\n  // tslint:disable-next-line: no-unsafe-any\n  return mod.require(request);\n}\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  // tslint:disable:strict-type-predicates\n  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n\nconst fallbackGlobalObject = {};\n\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nexport function getGlobalObject<T>(): T & SentryGlobal {\n  return (isNodeEnv()\n    ? global\n    : typeof window !== 'undefined'\n    ? window\n    : typeof self !== 'undefined'\n    ? self\n    : fallbackGlobalObject) as T & SentryGlobal;\n}\n// tslint:enable:strict-type-predicates\n\n/**\n * Extended Window interface that allows for Crypto API usage in IE browsers\n */\ninterface MsCryptoWindow extends Window {\n  msCrypto?: Crypto;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const global = getGlobalObject() as MsCryptoWindow;\n  const crypto = global.crypto || global.msCrypto;\n\n  if (!(crypto === void 0) && crypto.getRandomValues) {\n    // Use window.crypto API if available\n    const arr = new Uint16Array(8);\n    crypto.getRandomValues(arr);\n\n    // set 4 in byte 7\n    // tslint:disable-next-line:no-bitwise\n    arr[3] = (arr[3] & 0xfff) | 0x4000;\n    // set 2 most significant bits of byte 9 to '10'\n    // tslint:disable-next-line:no-bitwise\n    arr[4] = (arr[4] & 0x3fff) | 0x8000;\n\n    const pad = (num: number): string => {\n      let v = num.toString(16);\n      while (v.length < 4) {\n        v = `0${v}`;\n      }\n      return v;\n    };\n\n    return (\n      pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7])\n    );\n  }\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    // tslint:disable-next-line:no-bitwise\n    const r = (Math.random() * 16) | 0;\n    // tslint:disable-next-line:no-bitwise\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(\n  url: string,\n): {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n} {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  if (event.message) {\n    return event.message;\n  }\n  if (event.exception && event.exception.values && event.exception.values[0]) {\n    const exception = event.exception.values[0];\n\n    if (exception.type && exception.value) {\n      return `${exception.type}: ${exception.value}`;\n    }\n    return exception.type || exception.value || event.event_id || '<unknown>';\n  }\n  return event.event_id || '<unknown>';\n}\n\n/** JSDoc */\ninterface ExtensibleConsole extends Console {\n  [key: string]: any;\n}\n\n/** JSDoc */\nexport function consoleSandbox(callback: () => any): any {\n  const global = getGlobalObject<Window>();\n  const levels = ['debug', 'info', 'warn', 'error', 'log', 'assert'];\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  const originalConsole = global.console as ExtensibleConsole;\n  const wrappedLevels: { [key: string]: any } = {};\n\n  // Restore all wrapped console methods\n  levels.forEach(level => {\n    if (level in global.console && (originalConsole[level] as WrappedFunction).__sentry__) {\n      wrappedLevels[level] = (originalConsole[level] as WrappedFunction).__sentry_wrapped__;\n      originalConsole[level] = (originalConsole[level] as WrappedFunction).__sentry_original__;\n    }\n  });\n\n  // Perform callback manipulations\n  const result = callback();\n\n  // Revert restoration to wrapped state\n  Object.keys(wrappedLevels).forEach(level => {\n    originalConsole[level] = wrappedLevels[level];\n  });\n\n  return result;\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @param mechanism Mechanism of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(\n  event: Event,\n  value?: string,\n  type?: string,\n  mechanism: Mechanism = {\n    handled: true,\n    type: 'generic',\n  },\n): void {\n  event.exception = event.exception || {};\n  event.exception.values = event.exception.values || [];\n  event.exception.values[0] = event.exception.values[0] || {};\n  event.exception.values[0].value = event.exception.values[0].value || value || '';\n  event.exception.values[0].type = event.exception.values[0].type || type || 'Error';\n  event.exception.values[0].mechanism = event.exception.values[0].mechanism || mechanism;\n}\n","import { consoleSandbox, getGlobalObject } from './misc';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private _enabled: boolean;\n\n  /** JSDoc */\n  public constructor() {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.log(`${PREFIX}[Log]: ${args.join(' ')}`); // tslint:disable-line:no-console\n    });\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.warn(`${PREFIX}[Warn]: ${args.join(' ')}`); // tslint:disable-line:no-console\n    });\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.error(`${PREFIX}[Error]: ${args.join(' ')}`); // tslint:disable-line:no-console\n    });\n  }\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nconst logger = (global.__SENTRY__.logger as Logger) || (global.__SENTRY__.logger = new Logger());\n\nexport { logger };\n","import { isThenable } from './is';\n\n/** JSDoc */\nenum States {\n  /** JSDoc */\n  PENDING = 'PENDING',\n  /** JSDoc */\n  RESOLVED = 'RESOLVED',\n  /** JSDoc */\n  REJECTED = 'REJECTED',\n}\n\n/** JSDoc */\ninterface Handler<T, U> {\n  onFail: HandlerOnFail<U>;\n  onSuccess: HandlerOnSuccess<T, U>;\n}\n\ntype HandlerOnSuccess<T, U = any> = (value: T) => U | Thenable<U>;\ntype HandlerOnFail<U = any> = (reason: any) => U | Thenable<U>;\n\n/** JSDoc */\ninterface Thenable<T> {\n  /** JSDoc */\n  then<U>(onSuccess?: HandlerOnSuccess<T, U>, onFail?: HandlerOnFail<U> | ((reason: any) => void)): Thenable<U>;\n}\n\ntype Resolve<R> = (value?: R | Thenable<R> | any) => void;\ntype Reject = (value?: any) => void;\n\n/** JSDoc */\nexport class SyncPromise<T> implements PromiseLike<T> {\n  /** JSDoc */\n  private _state: States = States.PENDING;\n  /** JSDoc */\n  private _handlers: Array<Handler<T, any>> = [];\n  /** JSDoc */\n  private _value: T | any;\n\n  public constructor(callback: (resolve: Resolve<T>, reject: Reject) => void) {\n    try {\n      callback(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value: T) => {\n    this._setResult(value, States.RESOLVED);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason: any) => {\n    this._setResult(reason, States.REJECTED);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (value: T | any, state: States) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      (value as Thenable<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._value = value;\n    this._state = state;\n\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    if (this._state === States.REJECTED) {\n      // tslint:disable-next-line:no-unsafe-any\n      this._handlers.forEach(h => h.onFail && h.onFail(this._value));\n    } else {\n      // tslint:disable-next-line:no-unsafe-any\n      this._handlers.forEach(h => h.onSuccess && h.onSuccess(this._value));\n    }\n\n    this._handlers = [];\n    return;\n  };\n\n  /** JSDoc */\n  private readonly _attachHandler = (handler: Handler<T, any>) => {\n    this._handlers = this._handlers.concat(handler);\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n  ): SyncPromise<TResult1 | TResult2> {\n    // public then<U>(onSuccess?: HandlerOnSuccess<T, U>, onFail?: HandlerOnFail<U>): SyncPromise<T | U> {\n    return new SyncPromise<TResult1 | TResult2>((resolve, reject) => {\n      this._attachHandler({\n        onFail: reason => {\n          if (!onrejected) {\n            reject(reason);\n            return;\n          }\n\n          try {\n            resolve(onrejected(reason));\n            return;\n          } catch (e) {\n            reject(e);\n            return;\n          }\n        },\n        onSuccess: result => {\n          if (!onfulfilled) {\n            resolve(result);\n            return;\n          }\n          try {\n            resolve(onfulfilled(result));\n            return;\n          } catch (e) {\n            reject(e);\n            return;\n          }\n        },\n      });\n    });\n  }\n\n  /** JSDoc */\n  public catch<U>(onFail: HandlerOnFail<U>): SyncPromise<U> {\n    // tslint:disable-next-line:no-unsafe-any\n    return this.then<U>((val: any) => val, onFail as any);\n  }\n\n  /** JSDoc */\n  public toString(): string {\n    return `[object SyncPromise]`;\n  }\n\n  /** JSDoc */\n  public static resolve<U>(value?: U | Thenable<U>): SyncPromise<U> {\n    return new SyncPromise<U>(resolve => {\n      resolve(value);\n    });\n  }\n\n  /** JSDoc */\n  public static reject<U>(reason?: any): SyncPromise<U> {\n    return new SyncPromise<U>((_, reject) => {\n      reject(reason);\n    });\n  }\n}\n","import { Event, EventProcessor, Hub, Integration } from '@sentry/types';\nimport { getGlobalObject, isPlainObject } from '@sentry/utils';\n\n/** JSDoc */\ninterface Metadata {\n  [key: string]: any;\n  componentName?: string;\n  propsData?: {\n    [key: string]: any;\n  };\n  lifecycleHook?: string;\n}\n\n/** JSDoc */\nexport class Vue implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = Vue.id;\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Vue';\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _Vue: any; // tslint:disable-line:variable-name\n\n  /**\n   * When set to false, Sentry will suppress reporting all props data\n   * from your Vue components for privacy concerns.\n   */\n  private readonly _attachProps: boolean = true;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { Vue?: any; attachProps?: boolean } = {}) {\n    // tslint:disable-next-line: no-unsafe-any\n    this._Vue = options.Vue || getGlobalObject<any>().Vue;\n    if (options.attachProps === false) {\n      this._attachProps = false;\n    }\n  }\n\n  /** JSDoc */\n  private _formatComponentName(vm: any): string {\n    // tslint:disable:no-unsafe-any\n\n    if (vm.$root === vm) {\n      return 'root instance';\n    }\n    const name = vm._isVue ? vm.$options.name || vm.$options._componentTag : vm.name;\n    return (\n      (name ? `component <${name}>` : 'anonymous component') +\n      (vm._isVue && vm.$options.__file ? ` at ${vm.$options.__file}` : '')\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    // tslint:disable:no-unsafe-any\n\n    if (!this._Vue || !this._Vue.config) {\n      console.error('VueIntegration is missing a Vue instance');\n      return;\n    }\n\n    const oldOnError = this._Vue.config.errorHandler;\n\n    this._Vue.config.errorHandler = (error: Error, vm: { [key: string]: any }, info: string): void => {\n      const metadata: Metadata = {};\n\n      if (isPlainObject(vm)) {\n        metadata.componentName = this._formatComponentName(vm);\n\n        if (this._attachProps) {\n          metadata.propsData = vm.$options.propsData;\n        }\n      }\n\n      if (info !== void 0) {\n        metadata.lifecycleHook = info;\n      }\n\n      if (getCurrentHub().getIntegration(Vue)) {\n        getCurrentHub().withScope(scope => {\n          Object.keys(metadata).forEach(key => {\n            scope.setExtra(key, metadata[key]);\n          });\n\n          scope.addEventProcessor((event: Event) => {\n            if (event.sdk) {\n              const integrations = event.sdk.integrations || [];\n              event.sdk = {\n                ...event.sdk,\n                integrations: [...integrations, 'vue'],\n              };\n            }\n            return event;\n          });\n\n          getCurrentHub().captureException(error);\n        });\n      }\n\n      if (typeof oldOnError === 'function') {\n        oldOnError.call(this._Vue, error, vm, info);\n      }\n    };\n  }\n}\n","/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: any): boolean {\n  switch (Object.prototype.toString.call(wat)) {\n    case '[object Error]':\n      return true;\n    case '[object Exception]':\n      return true;\n    case '[object DOMException]':\n      return true;\n    default:\n      return wat instanceof Error;\n  }\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object ErrorEvent]';\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object DOMError]';\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object DOMException]';\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object String]';\n}\n\n/**\n * Checks whether given value's is a primitive (undefined, null, number, boolean, string)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: any): boolean {\n  return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object Object]';\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object RegExp]';\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): boolean {\n  // tslint:disable:no-unsafe-any\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n  // tslint:enable:no-unsafe-any\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: any): boolean {\n  // tslint:disable-next-line:no-unsafe-any\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n"],"names":["message","_super","_this","name","_newTarget","prototype","constructor","Object","setPrototypeOf","tslib_1.__extends","Error","fallbackGlobalObject","getGlobalObject","toString","call","process","global","window","self","consoleSandbox","callback","originalConsole","console","wrappedLevels","forEach","level","__sentry__","__sentry_wrapped__","__sentry_original__","result","keys","PREFIX","this","_enabled","Logger","_i","args","log","join","warn","error","__SENTRY__","States","logger","options","Vue","id","_Vue","attachProps","_attachProps","vm","$root","_isVue","$options","_componentTag","__file","_","getCurrentHub","config","oldOnError","errorHandler","info","wat","metadata","componentName","_formatComponentName","propsData","lifecycleHook","getIntegration","withScope","scope","key","setExtra","addEventProcessor","event","sdk","integrations","captureException"],"mappings":"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"}